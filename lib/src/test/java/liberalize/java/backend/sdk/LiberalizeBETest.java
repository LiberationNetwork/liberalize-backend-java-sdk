/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package liberalize.java.backend.sdk;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import liberalize.java.backend.sdk.data.model.AuthorizePaymentRequest;
import liberalize.java.backend.sdk.data.model.CapturePaymentRequest;
import liberalize.java.backend.sdk.data.model.CreatePaymentRequest;
import liberalize.java.backend.sdk.data.model.PaymentDetailsResponse;
import liberalize.java.backend.sdk.data.model.PaymentFlowResponse;
import liberalize.java.backend.sdk.data.model.RefundPaymentRequest;
import liberalize.java.backend.sdk.data.network.ApiResult;
import liberalize.java.backend.sdk.data.network.Environment;

import static java.util.concurrent.TimeUnit.SECONDS;
import static org.awaitility.Awaitility.await;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;

public class LiberalizeBETest {

  private static final String libService = "elements";
  private final LiberalizeBE liberalizeBE = LiberalizeBE.getInstance();

  @Before
  public void setup() {
    liberalizeBE.setEnvironment(Environment.STAGING);
    liberalizeBE.setPrivateKey("private_key");
  }

  @After
  public void tearDown() {
  }

  @Test
  public void setPrivateKey_PrivateKeyNull_ThrowException() {
    assertThrows(NullPointerException.class, () -> liberalizeBE.setPrivateKey(null));
  }

  @Test
  public void testSetEnv_CorrectEnv() {
    liberalizeBE.setEnvironment(Environment.PRODUCTION);
    assertEquals(liberalizeBE.getEnv(), Environment.PRODUCTION);

    liberalizeBE.setEnvironment(Environment.STAGING);
    assertEquals(liberalizeBE.getEnv(), Environment.STAGING);

    liberalizeBE.setEnvironment(Environment.DEVELOPMENT);
    assertEquals(liberalizeBE.getEnv(), Environment.DEVELOPMENT);
  }

  @Test
  public void createPayment_AuthorizeTrue_PaymentStatePendingAuthorization() {
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, true, "SGD");
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        payment[0] = response;
        assertEquals("paynow", response.payment.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.paymentId);
        assertEquals("PENDING_AUTHORIZATION", response.payment.state);
      }
    });
    await().atMost(5, SECONDS).until(() -> payment[0] != null);
  }

  @Test
  public void createPayment_AuthorizeFalse_PaymentStateCreated() {
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, false, "SGD");
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        payment[0] = response;
        assertEquals("paynow", response.payment.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.paymentId);
        assertEquals("CREATED", response.payment.state);
      }
    });
    await().atMost(5, SECONDS).until(() -> payment[0] != null);
  }

  @Test
  public void authorizePayment_CorrectArguments_PaymentStatePendingAuthorization() {
    // Create payment
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, false, "SGD");
    final String[] paymentId = {null};
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        assertEquals("CREATED", response.payment.state);
        assertNotNull(response.paymentId);
        paymentId[0] = response.paymentId;
      }
    });
    await().until(() -> paymentId[0] != null);

    // Authorize payment
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.authorizePayment(
      new AuthorizePaymentRequest("paynow"),
      libService,
      paymentId[0],
      new ApiResult<>() {
        @Override
        public void onError(String errorMsg) {
          assertNull(errorMsg);
        }

        @Override
        public void onSuccess(PaymentFlowResponse response) {
          assertEquals("PENDING_AUTHORIZATION", response.payment.state);
          payment[0] = response;
        }
      });
    await().until(() -> payment[0] != null);
    assertEquals("PENDING_AUTHORIZATION", payment[0].payment.state);
  }

  @Test
  public void capturePayment_PaynowSource_CaptureFailed() {
    // Create payment
    final String[] paymentId = {null};
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, true, "SGD");
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        paymentId[0] = response.paymentId;
        assertEquals("PENDING_AUTHORIZATION", response.payment.state);
      }
    });
    await().until(() -> paymentId[0] != null);

    // Authorize payment
    final String[] errorMessage = {null};
    liberalizeBE.capturePayment(
      new CapturePaymentRequest(10),
      libService,
      paymentId[0],
      new ApiResult<>() {
        @Override
        public void onError(String errorMsg) {
          errorMessage[0] = errorMsg;
          assertEquals("payment cannot be captured in current state", errorMsg);
        }

        @Override
        public void onSuccess(PaymentFlowResponse response) {
          assertNull(response);
        }
      });
    await().until(() -> errorMessage[0] != null);
  }

  @Test
  public void voidPayment_createPayment_voidPaymentFail() {
    // Create payment
    final String[] paymentId = {null};
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, true, "SGD");
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        paymentId[0] = response.paymentId;
        assertEquals("PENDING_AUTHORIZATION", response.payment.state);
      }
    });
    await().until(() -> paymentId[0] != null);

    // Authorize payment
    final String[] errorMessage = {null};
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.voidPayment(
      libService,
      paymentId[0],
      new ApiResult<>() {
        @Override
        public void onError(String errorMsg) {
          errorMessage[0] = errorMsg;
          assertEquals("payment cannot be voided in current state", errorMsg);
        }

        @Override
        public void onSuccess(PaymentFlowResponse response) {
          payment[0] = response;
          assertNull(response);
        }
      });
    await().until(() -> errorMessage[0] != null || payment[0] != null);
  }

  @Test
  public void refundPayment_createPayment_refundPaymentFail() {
    // Create payment
    final String[] paymentId = {null};
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, true, "SGD");
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        paymentId[0] = response.paymentId;
        assertEquals("PENDING_AUTHORIZATION", response.payment.state);
      }
    });
    await().until(() -> paymentId[0] != null);

    // Authorize payment
    final String[] errorMessage = {null};
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.refundPayment(
      new RefundPaymentRequest(10),
      libService,
      paymentId[0],
      new ApiResult<>() {
        @Override
        public void onError(String errorMsg) {
          errorMessage[0] = errorMsg;
          assertEquals("payment cannot be refunded in current state", errorMsg);
        }

        @Override
        public void onSuccess(PaymentFlowResponse response) {
          payment[0] = response;
          assertNull(response);
        }
      });
    await().until(() -> errorMessage[0] != null || payment[0] != null);
  }

  @Test
  public void getPayment_CreatePaymentAuthorizeTrue_PaymentStatePendingAuthorization() {
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, true, "SGD");
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        payment[0] = response;
        assertEquals("paynow", response.payment.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.paymentId);
        assertEquals("PENDING_AUTHORIZATION", response.payment.state);
      }
    });
    await().atMost(5, SECONDS).until(() -> payment[0] != null);

    final String[] paymentId = {null};
    final String[] errorMessage = {null};
    liberalizeBE.getPayment(libService, payment[0].paymentId, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        errorMessage[0] = errorMsg;
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentDetailsResponse response) {
        paymentId[0] = response.id;
        assertEquals("paynow", response.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.id);
        assertEquals("PENDING_AUTHORIZATION", response.state);
      }
    });
    await().atMost(5, SECONDS).until(() -> paymentId[0] != null || errorMessage[0] != null);
  }

  @Test
  public void getPayment_CreatePaymentAuthorizeFalse_PaymentStateCreated() {
    CreatePaymentRequest request = new CreatePaymentRequest("paynow", 10, false, "SGD");
    final PaymentFlowResponse[] payment = {null};
    liberalizeBE.createPayment(request, libService, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentFlowResponse response) {
        payment[0] = response;
        assertEquals("paynow", response.payment.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.paymentId);
        assertEquals("CREATED", response.payment.state);
      }
    });
    await().atMost(5, SECONDS).until(() -> payment[0] != null);

    final String[] paymentId = {null};
    final String[] errorMessage = {null};
    liberalizeBE.getPayment(libService, payment[0].paymentId, new ApiResult<>() {
      @Override
      public void onError(String errorMsg) {
        errorMessage[0] = errorMsg;
        assertNull(errorMsg);
      }

      @Override
      public void onSuccess(PaymentDetailsResponse response) {
        paymentId[0] = response.id;
        assertEquals("paynow", response.source);
        assertEquals(10, response.amount, 0.0);
        assertNotNull(response.id);
        assertEquals("CREATED", response.state);
      }
    });

    await().atMost(5, SECONDS).until(() -> paymentId[0] != null || errorMessage[0] != null);
  }
}
